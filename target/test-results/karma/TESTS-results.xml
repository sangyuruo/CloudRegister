<?xml version="1.0"?>
<testsuite name="PhantomJS 2.1.1 (Mac OS X 0.0.0)" package="" timestamp="2017-10-31T13:41:38" id="0" hostname="sangjundeMacBook-Pro.local" tests="14" errors="0" failures="0" time="0.479">
  <properties>
    <property name="browser.fullName" value="Mozilla/5.0 (Macintosh; Intel Mac OS X) AppleWebKit/538.1 (KHTML, like Gecko) PhantomJS/2.1.1 Safari/538.1"/>
  </properties>
  <testcase name="Component Tests JhiHealthCheckComponent baseName and subSystemName should return the basename when it has no sub system" time="0.098" classname="PhantomJS_2_1_1_(Mac_OS_X_0_0_0).Component Tests"/>
  <testcase name="Component Tests JhiHealthCheckComponent baseName and subSystemName should return the basename when it has sub systems" time="0.04" classname="PhantomJS_2_1_1_(Mac_OS_X_0_0_0).Component Tests"/>
  <testcase name="Component Tests JhiHealthCheckComponent baseName and subSystemName should return the sub system name" time="0.031" classname="PhantomJS_2_1_1_(Mac_OS_X_0_0_0).Component Tests"/>
  <testcase name="Component Tests JhiHealthCheckComponent baseName and subSystemName should return the subsystem when it has multiple keys" time="0.032" classname="PhantomJS_2_1_1_(Mac_OS_X_0_0_0).Component Tests"/>
  <testcase name="Component Tests JhiHealthCheckComponent transformHealthData should flatten empty health data" time="0.026" classname="PhantomJS_2_1_1_(Mac_OS_X_0_0_0).Component Tests"/>
  <testcase name="Component Tests JhiHealthCheckComponent should flatten health data with no subsystems" time="0.028" classname="PhantomJS_2_1_1_(Mac_OS_X_0_0_0).Component Tests"/>
  <testcase name="Component Tests JhiHealthCheckComponent should flatten health data with subsystems at level 1, main system has no additional information" time="0.022" classname="PhantomJS_2_1_1_(Mac_OS_X_0_0_0).Component Tests"/>
  <testcase name="Component Tests JhiHealthCheckComponent should flatten health data with subsystems at level 1, main system has additional information" time="0.022" classname="PhantomJS_2_1_1_(Mac_OS_X_0_0_0).Component Tests"/>
  <testcase name="Component Tests JhiHealthCheckComponent should flatten health data with subsystems at level 1, main system has additional error" time="0.021" classname="PhantomJS_2_1_1_(Mac_OS_X_0_0_0).Component Tests"/>
  <testcase name="Component Tests HomeComponent populate Dashboard with Eureka status data" time="0.047" classname="PhantomJS_2_1_1_(Mac_OS_X_0_0_0).Component Tests"/>
  <testcase name="Component Tests HomeComponent populate Dashboard with Applications data" time="0.031" classname="PhantomJS_2_1_1_(Mac_OS_X_0_0_0).Component Tests"/>
  <testcase name="Component Tests ApplicationsComponent refresh data" time="0.028" classname="PhantomJS_2_1_1_(Mac_OS_X_0_0_0).Component Tests"/>
  <testcase name="Component Tests HistoryComponent refresh data" time="0.03" classname="PhantomJS_2_1_1_(Mac_OS_X_0_0_0).Component Tests"/>
  <testcase name="Component Tests HistoryComponent activate registered tab" time="0.023" classname="PhantomJS_2_1_1_(Mac_OS_X_0_0_0).Component Tests"/>
  <system-out>
    <![CDATA[PhantomJS 2.1.1 (Mac OS X 0.0.0) ERROR: 'Error during cleanup of component', JhiHealthCheckComponent{modalService: null, healthService: JhiHealthService{http: Http{_backend: ..., _defaultOptions: ...}, separator: '.'}, routesService: JhiRoutesService{http: Http{_backend: ..., _defaultOptions: ...}, sessionStorage: SessionStorageService{sType: ...}, routeChangedSource: Subject{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ...}, routeDownSource: Subject{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ...}, routeReloadSource: Subject{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ...}, routeChanged$: Observable{_isScalar: ..., source: ...}, routeDown$: Observable{_isScalar: ..., source: ...}, routeReload$: Observable{_isScalar: ..., source: ...}}}
,PhantomJS 2.1.1 (Mac OS X 0.0.0) ERROR: 'Error during cleanup of component', JhiHealthCheckComponent{modalService: null, healthService: JhiHealthService{http: Http{_backend: ..., _defaultOptions: ...}, separator: '.'}, routesService: JhiRoutesService{http: Http{_backend: ..., _defaultOptions: ...}, sessionStorage: SessionStorageService{sType: ...}, routeChangedSource: Subject{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ...}, routeDownSource: Subject{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ...}, routeReloadSource: Subject{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ...}, routeChanged$: Observable{_isScalar: ..., source: ...}, routeDown$: Observable{_isScalar: ..., source: ...}, routeReload$: Observable{_isScalar: ..., source: ...}}}
,PhantomJS 2.1.1 (Mac OS X 0.0.0) ERROR: 'Error during cleanup of component', JhiHealthCheckComponent{modalService: null, healthService: JhiHealthService{http: Http{_backend: ..., _defaultOptions: ...}, separator: '.'}, routesService: JhiRoutesService{http: Http{_backend: ..., _defaultOptions: ...}, sessionStorage: SessionStorageService{sType: ...}, routeChangedSource: Subject{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ...}, routeDownSource: Subject{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ...}, routeReloadSource: Subject{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ...}, routeChanged$: Observable{_isScalar: ..., source: ...}, routeDown$: Observable{_isScalar: ..., source: ...}, routeReload$: Observable{_isScalar: ..., source: ...}}}
,PhantomJS 2.1.1 (Mac OS X 0.0.0) ERROR: 'Error during cleanup of component', JhiHealthCheckComponent{modalService: null, healthService: JhiHealthService{http: Http{_backend: ..., _defaultOptions: ...}, separator: '.'}, routesService: JhiRoutesService{http: Http{_backend: ..., _defaultOptions: ...}, sessionStorage: SessionStorageService{sType: ...}, routeChangedSource: Subject{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ...}, routeDownSource: Subject{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ...}, routeReloadSource: Subject{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ...}, routeChanged$: Observable{_isScalar: ..., source: ...}, routeDown$: Observable{_isScalar: ..., source: ...}, routeReload$: Observable{_isScalar: ..., source: ...}}}
,PhantomJS 2.1.1 (Mac OS X 0.0.0) ERROR: 'Error during cleanup of component', JhiHealthCheckComponent{modalService: null, healthService: JhiHealthService{http: Http{_backend: ..., _defaultOptions: ...}, separator: '.'}, routesService: JhiRoutesService{http: Http{_backend: ..., _defaultOptions: ...}, sessionStorage: SessionStorageService{sType: ...}, routeChangedSource: Subject{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ...}, routeDownSource: Subject{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ...}, routeReloadSource: Subject{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ...}, routeChanged$: Observable{_isScalar: ..., source: ...}, routeDown$: Observable{_isScalar: ..., source: ...}, routeReload$: Observable{_isScalar: ..., source: ...}}}
,PhantomJS 2.1.1 (Mac OS X 0.0.0) ERROR: 'Error during cleanup of component', JhiHealthCheckComponent{modalService: null, healthService: JhiHealthService{http: Http{_backend: ..., _defaultOptions: ...}, separator: '.'}, routesService: JhiRoutesService{http: Http{_backend: ..., _defaultOptions: ...}, sessionStorage: SessionStorageService{sType: ...}, routeChangedSource: Subject{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ...}, routeDownSource: Subject{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ...}, routeReloadSource: Subject{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ...}, routeChanged$: Observable{_isScalar: ..., source: ...}, routeDown$: Observable{_isScalar: ..., source: ...}, routeReload$: Observable{_isScalar: ..., source: ...}}}
,PhantomJS 2.1.1 (Mac OS X 0.0.0) ERROR: 'Error during cleanup of component', JhiHealthCheckComponent{modalService: null, healthService: JhiHealthService{http: Http{_backend: ..., _defaultOptions: ...}, separator: '.'}, routesService: JhiRoutesService{http: Http{_backend: ..., _defaultOptions: ...}, sessionStorage: SessionStorageService{sType: ...}, routeChangedSource: Subject{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ...}, routeDownSource: Subject{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ...}, routeReloadSource: Subject{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ...}, routeChanged$: Observable{_isScalar: ..., source: ...}, routeDown$: Observable{_isScalar: ..., source: ...}, routeReload$: Observable{_isScalar: ..., source: ...}}}
,PhantomJS 2.1.1 (Mac OS X 0.0.0) ERROR: 'Error during cleanup of component', JhiHealthCheckComponent{modalService: null, healthService: JhiHealthService{http: Http{_backend: ..., _defaultOptions: ...}, separator: '.'}, routesService: JhiRoutesService{http: Http{_backend: ..., _defaultOptions: ...}, sessionStorage: SessionStorageService{sType: ...}, routeChangedSource: Subject{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ...}, routeDownSource: Subject{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ...}, routeReloadSource: Subject{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ...}, routeChanged$: Observable{_isScalar: ..., source: ...}, routeDown$: Observable{_isScalar: ..., source: ...}, routeReload$: Observable{_isScalar: ..., source: ...}}}
,PhantomJS 2.1.1 (Mac OS X 0.0.0) ERROR: 'Error during cleanup of component', JhiHealthCheckComponent{modalService: null, healthService: JhiHealthService{http: Http{_backend: ..., _defaultOptions: ...}, separator: '.'}, routesService: JhiRoutesService{http: Http{_backend: ..., _defaultOptions: ...}, sessionStorage: SessionStorageService{sType: ...}, routeChangedSource: Subject{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ...}, routeDownSource: Subject{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ...}, routeReloadSource: Subject{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ...}, routeChanged$: Observable{_isScalar: ..., source: ...}, routeDown$: Observable{_isScalar: ..., source: ...}, routeReload$: Observable{_isScalar: ..., source: ...}}}
,PhantomJS 2.1.1 (Mac OS X 0.0.0) ERROR: 'Error during cleanup of component', JhiHistoryComponent{historyService: JhiHistoryService{http: Http{_backend: ..., _defaultOptions: ...}}, refreshService: JhiRefreshService{http: Http{_backend: ..., _defaultOptions: ...}, sessionStorage: SessionStorageService{sType: ...}, refreshChangedSource: Subject{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ...}, refreshReloadSource: Subject{_isScalar: ..., observers: ..., closed: ..., isStopped: ..., hasError: ..., thrownError: ...}, refreshChanged$: Observable{_isScalar: ..., source: ...}, refreshReload$: Observable{_isScalar: ..., source: ...}}, data: Object{canceled: Object{11052017: ...}, registered: Object{11022017: ...}}, activeKey: 'registered', items: [Object{key: ..., value: ...}]}

]]>
  </system-out>
  <system-err/>
</testsuite>